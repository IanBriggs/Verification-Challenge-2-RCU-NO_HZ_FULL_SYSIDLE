digraph {

// atomic_sat.h
{ node [shape=box style=filled fillcolor=red]
  atomic_read
  atomic_set
  atomic_inc
  smp_mb__before_atomic_inc
  smp_mb__after_atomic_inc	
}


// cmpxchg_32_sat.h
{ node [shape=box style=filled fillcolor=orange]

}


// fake_sat.h
{ node [shape=box style=filled fillcolor=yellow]
  ULONG_CMP_GE
  ULONG_CMP_LT
  xchg
  cmpxchg
  barrier
  ACCESS_ONCE
  smp_mb
  offsetof
  container_of
  DIV_ROUND_UP
  call_rcu
  smp_processor_id
  WARN_ON_ONCE
  cpu_is_offline
  per_cpu_ptr
}


// rcutree.h
{ node [shape=box style=filled fillcolor=green]

}


// sysidle_sat.c 
{ node [shape=box style=filled fillcolor=blue]
  rcu_kick_nohz_cpu
  rcu_gp_in_progress
  do_fqs
  timekeeping_cpu
  other_cpu  
  main
}


// sysidle.h
{ node [shape=box style=filled fillcolor=indigo]
  rcu_sysidle_enter
  rcu_sysidle_force_exit
  rcu_sysidle_exit
  rcu_sysidle_check_cpu
  rcu_sysidle_delay
  rcu_sysidle
  rcu_sysidle_cancel  
  rcu_sysidle_report
  rcu_sysidle_cb
  rcu_sys_is_idle
}




// atomic_sat.h
smp_mb__before_atomic_inc -> { barrier }
smp_mb__after_atomic_inc -> { barrier }


// cmpxchg_32_sat.h



// fake_sat.h
container_of -> { typeof offsetof }


// rcutree.h



// sysidle_sat.c
rcu_kick_nohz_cpu -> { printf }

do_fqs -> { rcu_sysidle_check_cpu ACCESS_ONCE rcu_sysidle_report
       printf rcu_sys_is_idle }

timekeeping_cpu -> { do_fqs }

other_cpu -> { WARN_ON_ONCE rcu_sysidle_enter rcu_sysidle_exit }

main -> { malloc sizeof memset atomic_set pthread_create timekeeping_cpu
     other_cpu pthread_join assert atomic_read }




// sysidle.h
rcu_sysidle_enter -> { WARN_ON_ONCE  ACCESS_ONCE smp_mb__before_atomic_inc
		  atomic_inc smp_mb__after_atomic_inc }

rcu_sysidle_force_exit -> { ACCESS_ONCE cmpxchg rcu_kick_nohz_cpu smp_mb }

rcu_sysidle_exit -> { WARN_ON_ONCE smp_mb__before_atomic_inc atomic_inc
		 smp_mb__after_atomic_inc smp_processor_id
		 rcu_sysidle_force_exit }

rcu_sysidle_check_cpu -> { cpu_is_offline rcu_gp_in_progress WARN_ON_ONCE
		      smp_processor_id atomic_read smp_mb ACCESS_ONCE
		      ULONG_CMP_LT }

rcu_sysidle_delay -> { DIV_ROUND_UP }

rcu_sysidle -> { ACCESS_ONCE  ULONG_CMP_GE rcu_sysidle_delay cmpxchg }

rcu_sysidle_cancel -> { smp_mb ACCESS_ONCE }

rcu_sysidle_report -> { rcu_sysidle rcu_sysidle_cancel }

rcu_sysidle_cb -> { smp_mb container_of ACCESS_ONCE }

rcu_sys_is_idle -> { ACCESS_ONCE WARN_ON_ONCE smp_processor_id per_cpu_ptr
		rcu_sysidle_check_cpu rcu_sysidle_report cmpxchg smp_mb
		rcu_gp_in_progress xchg call_rcu }

rcu_sys_is_idle -> call_rcu -> rcu_sysidle_cb

}